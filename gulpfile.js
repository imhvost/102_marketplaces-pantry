'use strict';

const theme = 'marpan';

const gulp = require('gulp');
const	watch = require('gulp-watch');
const	gutil = require('gulp-util');
const	less = require('gulp-less');
const	lessAutoprefix = require('less-plugin-autoprefix');
const	autoprefix = new lessAutoprefix({
	browsers: ['last 4 versions', 'IE 11']
});
const uglifyes = require('uglify-es');
const composer = require('gulp-uglify/composer');
const uglify = composer(uglifyes, console);
const	cssmin = require('gulp-minify-css');
const	htmlmin = require('gulp-htmlmin');
const	rimraf = require('rimraf');
const	babel = require('gulp-babel');
const	svgSprite = require('gulp-svg-sprites');
const	cheerio = require('gulp-cheerio');
const	replace = require('gulp-replace');
const	fileinclude = require('gulp-file-include');
const	include = require('gulp-include');
const webp = require('gulp-webp');

const path = {
	src: {
		html: 'frontend/*.*',
		templates: 'frontend/inc/*.*',
		functions: 'frontend/functions/*.*',
		js: 'frontend/js/scripts.js',
		jsFiles: ['frontend/js/admin.js', 'frontend/js/jquery.min.js'],
		less: 'frontend/less/styles.less',
		img: 'frontend/img/**/*.*',
		webp: ['frontend/img/**/*.jpg', 'frontend/img/**/*.png'],
		fonts: 'frontend/fonts/**/*.*',
		css: 'frontend/css/admin.css',
		blocks: 'frontend/blocks/*.*',
		languages: 'frontend/languages/*.*'
	},
	dest: {
		html: '../themes/'+theme+'/',
		templates: '../themes/'+theme+'/inc/',
		functions: '../themes/'+theme+'/functions/',
		js: '../themes/'+theme+'/js/',
		less: '../themes/'+theme+'/css/',
		img: '../themes/'+theme+'/img/',
		fonts: '../themes/'+theme+'/fonts/',
		css: '../themes/'+theme+'/css/',
		blocks: '../themes/'+theme+'/blocks/',
		languages: '../themes/'+theme+'/languages/',
	},
	watch: {
		html: 'frontend/**/*.*',
		templates: 'frontend/inc/**/*.*',
		functions: 'frontend/functions/**/*.*',
		js: 'frontend/js/**/*.js',
		less: 'frontend/less/*.*',
		img: 'frontend/img/**/*.*',
		fonts: 'frontend/fonts/**/*.*',
		webp: ['frontend/img/**/*.jpg', 'frontend/img/**/*.png'],
		css: 'frontend/css/**/*.*',
		blocks: 'frontend/blocks/**/*.*',
		languages: 'frontend/languages/**/*.*',
	},
	clean: '../themes/'+theme+'/'
}

gulp.task('svgsprite', function () {
	return gulp.src('frontend/img/sprite/*.svg')
		.pipe(cheerio({
			run: function ($) {
				$('[fill]').removeAttr('fill');
				$('[style]').removeAttr('style');
				$('clipPath').remove();
				$('[clip-path]').removeAttr('clip-path');
				$('path[id]').removeAttr('id');
			},
			parserOptions: { xmlMode: true }
		}))
		.pipe(replace('&gt;', '>'))
		.pipe(svgSprite({
				mode: 'symbols',
				preview: false,
				selector: "icon-%f",
				svg: {
					symbols: 'sprite.php'
				}
			}
		))
		.pipe(gulp.dest('frontend/inc/'));
});

function handleError (error) {
	console.log(error.toString());
	this.emit('end');
}

gulp.task('clean', function (cb) {
	rimraf(path.clean, cb);
});

gulp.task('html', function(){
	return gulp.src(path.src.html)
	// .pipe(fileinclude({
      // prefix: '@@',
      // basepath: 'frontend/templates/',
		// indent: true
    // }))
	.pipe(gulp.dest(path.dest.html))
})

gulp.task('templates', function(){
	return gulp.src(path.src.templates)
	.pipe(gulp.dest(path.dest.templates))
})

gulp.task('blocks', function(){
	return gulp.src(path.src.blocks)
	.pipe(gulp.dest(path.dest.blocks))
})

gulp.task('functions', function(){
	return gulp.src(path.src.functions)
	.pipe(gulp.dest(path.dest.functions))
})

gulp.task('languages', function(){
	return gulp.src(path.src.languages)
	.pipe(gulp.dest(path.dest.languages))
})

gulp.task('css', function(){
	return gulp.src(path.src.css)
	.pipe(gulp.dest(path.dest.css))
})

gulp.task('html:min', function(){
	return gulp.src(path.src.html)
	// .pipe(fileinclude({
      // prefix: '@@',
      // basepath: 'frontend/templates/',
		// indent: true
    // }))
	.pipe(htmlmin({
		collapseWhitespace: true,
		removeComments: true,
		minifyJS: true,
		minifyCSS: true,
		includeAutoGeneratedTags: false,
		preventAttributesEscaping: true
	}))
	.pipe(gulp.dest(path.dest.html))
})

gulp.task('theme-style-copy', function(){
	return gulp.src('frontend/style.css')
	.pipe(gulp.dest(path.dest.html))
})

gulp.task('less', function(){
	return gulp.src(path.src.less)
	.pipe(less({
		plugins: [autoprefix]
	}))
	.on('error', handleError)
	.pipe(gulp.dest(path.dest.less));
})

gulp.task('less:build', function(){
	return gulp.src(path.src.less)
	.pipe(less({
		plugins: [autoprefix]
	}))
	.on('error', handleError)
	.pipe(gulp.dest(path.dest.less));
})

gulp.task('less:min', function () {
	return gulp.src(path.src.less)
	.pipe(less({
		plugins: [autoprefix]
	}))
	.on('error', handleError)
	.pipe(cssmin())
	.pipe(gulp.dest(path.dest.less))
});

gulp.task('js', function () {
   return gulp.src(path.src.js)
		.pipe(babel({
			presets: ['@babel/env']
		}))
		.on('error', handleError)
		.pipe(include())
		.pipe(gulp.dest(path.dest.js))
});

gulp.task('js:build', function () {
   return gulp.src(path.src.js)
		.pipe(babel({
			presets: ['@babel/env']
		}))
		.on('error', handleError)
		.pipe(include())
		.pipe(gulp.dest(path.dest.js))
});

gulp.task('js:min', function () {
   return gulp.src(path.src.js)
		.pipe(babel({
			presets: ['@babel/env']
		}))
		.on('error', handleError)
		.pipe(include())
		.pipe(uglify({ 
			mangle: false,
			ecma: 6 
		}))
		.pipe(gulp.dest(path.dest.js))
});

gulp.task('webp', function () {
	return gulp.src(path.src.webp)
	.pipe(webp({
		quality: 75
	}))
	.pipe(gulp.dest(path.dest.img))
});

gulp.task('img', function () {
	return gulp.src(path.src.img, {cwd: process.cwd()})
	.pipe(gulp.dest(path.dest.img, {cwd: process.cwd()}))
});

gulp.task('fonts', function(){
	return gulp.src(path.src.fonts)
	.pipe(gulp.dest(path.dest.fonts))
})

gulp.task('js:files', function () {
   return gulp.src(path.src.jsFiles)
		// .pipe(uglify())
		.pipe(gulp.dest(path.dest.js))
});

gulp.task('js:files:min', function () {
   return gulp.src(path.src.jsFiles)
		.pipe(uglify())
		.pipe(gulp.dest(path.dest.js))
});

gulp.task('watch', function () {
	
	const webpWatcher = gulp.watch(path.watch.webp);
	webpWatcher.on('add', function (path, stats){
		onceWebp(path);
	});
	webpWatcher.on('change', function (path, stats){
		onceWebp(path);
	});
	function onceWebp(filename){
		return gulp.src(filename, {base: 'frontend/img/'})
		.pipe(webp({
			quality: 75
		}))
		.pipe(gulp.dest(path.dest.img))
	};
	
	gulp.watch(path.watch.html, gulp.series('html'));
	gulp.watch(path.watch.templates, gulp.series('templates'));
	gulp.watch(path.watch.blocks, gulp.series('blocks'));
	gulp.watch(path.watch.css, gulp.series('css', 'less'));
	gulp.watch(path.watch.less, gulp.series('less'));
	gulp.watch(path.watch.js, gulp.series('js'));
	gulp.watch(path.watch.img, gulp.series('img'));
	gulp.watch('frontend/img/sprite/', gulp.series('svgsprite', 'templates'));
	gulp.watch(path.watch.fonts, gulp.series('fonts'));
	gulp.watch(path.watch.functions, gulp.series('functions'));
	gulp.watch(path.watch.languages, gulp.series('languages'));
	gulp.watch(path.watch.js, gulp.series('js:files'));
});

gulp.task('default', gulp.series('clean', 'html', 'less', 'js', 'js:files', 'img', 'webp', 'fonts', 'svgsprite', 'templates', 'blocks', 'functions', 'languages', 'css', 'watch'));
gulp.task('min', gulp.series('clean', 'html:min', 'theme-style-copy', 'less:min', 'js:min', 'js:files:min', 'img', 'webp', 'fonts', 'svgsprite', 'templates', 'blocks', 'functions', 'languages', 'css'));
gulp.task('build', gulp.series('clean', 'html', 'less:build', 'js:build', 'js:files', 'img', 'webp', 'fonts', 'svgsprite', 'templates', 'blocks', 'functions', 'languages', 'css'));